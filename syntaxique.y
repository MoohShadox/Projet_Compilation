%{
#include<stdio.h>
extern FILE* yyin;
%}

%union
{char* chaine;
int entier;
}

%token DEC FIN INST IDF VIRG PV UFLOATCH UINTCH DEFINE UINT UFLOAT MULT DIV MOINS ADD NOT OR AND SUP INF EGALE SUPE INFE DEGALE DIFF VRAI FAUX IF THEN ELSE ENDIF FOR ENDFOR PO PF

%%
S :IDF DEC BD INST BI FIN {printf("Programme correcte \n");}
;
BD :DECL PV BD 
	|DECL PV
;
EIDF :IDF VIRG EIDF 
	|IDF
;
TYPE :UINTCH | UFLOATCH
;
DECL :TYPE EIDF 
	|DEFINE UINTCH IDF EGALE UINT 
	|DEFINE UFLOATCH IDF EGALE UFLOAT
;
PRODUIT :ADDITION MULT ADDITION 
		|ADDITION DIV ADDITION
		|ADDITION
;
ADDITION :VAL MOINS VAL
		|VAL ADD VAL
		|VAL
;
VAL :NBR 
	|MOINS NBR
;
NBR :UINT
	|UFLOAT
;
EXPP1 : NOT EXPP2 
	| EXPP2
;
EXPP2 : EXPP2 AND EXPP2
		| EXPP3
;
EXPP3 : EXPP3 OR EXPP3
		| BOOLVAL
;		
BOOLVAL : COMPARAISON 
		| FAUX
		| VRAI
;
COMPARAISON : EXPR SUP EXPR 
		| EXPR INF EXPR
		| EXPR INFE EXPR
		| EXPR SUPE EXPR
		| EXPR DEGALE EXPR
		| EXPR DIFF EXPR
;
EXPR : IDF 
	| PRODUIT
;
BI :  INSTR PV BI
	| INSTR PV
;
INSTR : AFFECTATION 
	| BOUCLE
	| CONDITION
;
AFFECTATION : IDF EGALE PRODUIT
CONDITION : IF EXPP1 THEN BI ELSE BI ENDIF
BOUCLE : FOR PO AFFECTATION PV PO CONDITION PF PV AFFECTATION PF BI ENDFOR
;
%%
int yyerror(char* msg){
printf("%s",msg);
return 1;
}
int main(){
yyin = fopen("code.txt","r");
yyparse();
return 0;
}
